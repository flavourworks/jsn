import import.jsn
{   
	// sytax highlights quite nicely in most editors with c or c++ syntax      
	
    // allow comments
    
    /*
    multi-
    line 
    comments
    */
    
    //		tabs and any whitespace allowed

    // compatible with json
    "json":
    {
        "bool": true,
        "int": 1,
        "float": 1.0,
        "string": "yes",
        "array": [1, 2, 3]
    },
    
    // compatible with json5
    json5:
    {
        unquoted: 'and you can quote me on that',
        single_quotes: 'I can use "double quotes" here',
        hexadecimal: 0xdecaf,
        line_breaks: "Look, Mom! No \
\\n's!",
  		leading_decimal_point: .8675309, and_trailing: 8675309.,
  		positive_sign: +1,
  		trailing_comma: 'in objects', and_in: ['arrays',],
    },
    
    // jsn features
    jsn:
    {
        unquoted_string: without_whitespace, // cannot contain whitespace or special chars (see str_test)
        unquoted: [strings, in, arrays],
        binary_literal: 0b10011,
        bit_shifts: 1<<16 | 1<<8,
        
        // you can define variables to be re-used
        jsn_vars: 
        {
        	data: "path/to/data",
        	var_str: "hello",
        	var_int: 10
        },
        
        // evaluate variables with ${} inside quotes..
        variable_data_path: "${data}/subdir",
        variable_int: "${var_int}",
        array_of_vars: ["${data}", "${var_str}"],
        
        // inheritance below..
        base: "foo",
        sub_object:
        {
            one: "1",
            two: "2",
            nested_var: "${var_int}", // variable comes from outer scope.
        }, // allow trailing commas
    },
    
    inheritence(jsn): // add object name to inherit inside brackets
    {        
        // inheritance adds keys from jsn object
    	// ..
    	
        // duplicated keys are overridden by the derived object
        base: "bar",
        
        // inheritance on sub-objects continues recursively
        sub_object:
        {
            three: "3"
            //..
        }
    },
    
    // multiple and hierarchical inheritance
    objb: { b: "b" },
    
    multiple_inheritence(inheritence, objb):
    {
    	// vars can also be shadowed / overriden..
    	jsn_vars: 
        {
        	data: "another/path/to/data",
        	var_int: 22
        },
        
    	c: "c"
    },
    
    //**
    str_test: ":[{}]'+.,0b0x" // this tests ignoring special chars inside quotes
}